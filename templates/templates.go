// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbb\x4a\x04\x31\x18\x85\xfb\x3c\xc5\x29\xa6\x5c\x32\xfd\xc2\x16\xb2\xec\x80\x8d\x8d\x60\x1f\x77\x32\x12\xc8\x24\xc3\x24\x83\x2c\x21\x85\x95\x77\xb0\x18\x6c\x6d\x44\x6c\x54\x6c\xbc\xa0\xe0\xcb\x8c\xd9\xed\x7c\x05\x49\x76\x05\xdb\x2f\xdf\x7f\x4e\x4e\x9e\xc3\x39\x64\xc6\x60\x3c\x01\x85\xf7\x64\x4d\xe8\x0e\xab\x39\xbc\xa7\xe6\x50\x54\x96\xe4\x79\xe4\xe1\xe1\x36\x5c\x1f\x0f\x1f\x2f\xcb\xfe\x19\x53\x5d\xf2\x42\x2e\xb0\xec\x6f\xc2\xc9\xd5\xcf\xe7\xc5\xea\xe9\x75\x78\xbb\x5c\xdd\x1d\x85\xd3\xf3\xef\xb3\xfb\xe1\xeb\x31\xf4\xef\xf1\x92\x88\xba\xd1\xad\x45\xa1\x3b\x55\x32\x2b\xb4\x22\xa4\xe9\xf6\xa5\x98\x83\xab\xae\xfe\x5f\x37\xc6\xb6\xb2\x23\xcc\x12\x26\x04\x00\x36\xa6\x5d\x34\x9c\x49\xc1\x0c\x66\x98\x44\x2b\x3d\x3a\x87\x96\xa9\x03\x8e\x4c\x8c\x90\x55\x69\x44\x3c\xa6\x7b\x4c\x76\xdc\xc4\x3d\x51\x9b\x33\xc3\x37\x3b\xe9\xee\x74\x8b\x16\xba\xad\x99\x2d\x84\xe4\x65\x2a\xce\xaa\xbf\x0f\x60\x92\xbc\x6a\x1d\x10\x81\x73\xe0\xaa\x8c\x49\x9e\xfc\x06\x00\x00\xff\xff\x02\xf2\x29\x95\x2e\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1488211295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x6f\xdb\x48\x10\xed\xf9\x2b\x06\x82\x0a\x09\xd0\x51\x57\x13\xd0\xc1\x3a\xc3\x02\xae\xb8\xc0\xb0\x83\xa4\x10\x54\xac\xc8\xa1\xbc\x01\xb9\xcb\xec\x2e\x1d\x18\xcc\x16\xa9\xf2\x0d\xa4\x30\xd2\xa6\x09\x82\x34\x49\x90\x26\x1f\x48\x80\xfc\x19\x47\x76\x97\xbf\x10\xec\x72\xf9\x21\x29\xb2\xcd\x8a\x5c\xbe\x99\x79\xf3\xde\xcc\x0e\x87\x50\x14\xd0\x95\x12\x82\x11\xf8\xa0\xb5\x57\x9f\xf8\x37\x48\x8a\xa0\xb5\x2f\xef\xd1\x58\x79\xc3\xa1\xf9\xb5\x7c\xf7\x7a\xf9\xf2\xe1\xd9\xb7\x4f\xe7\xa7\x1f\x61\x97\x47\x38\x49\x4e\xe0\xfc\xf4\xd5\xf2\xd1\x8b\x5f\xdf\x9f\x5d\x7c\xf8\x7c\xf6\xe5\xf9\xc5\x9b\x07\xcb\xc7\x4f\x7f\x3e\x79\x7b\xf6\xe3\xfd\xf2\xf4\xab\x89\xf4\x68\x9a\x71\xa1\x60\xc2\x73\x16\x11\x45\x39\xf3\xbc\x2c\x9f\x27\x34\x04\xa9\x44\x1e\xaa\xb5\x9a\x50\x78\x00\x60\x0e\x05\x61\x0b\x84\x2e\x1d\x40\x37\x35\x1c\x0d\xe8\x10\xc5\x31\x0d\xd1\xff\x1f\xd5\x11\x8f\x24\x68\x6d\xa2\x05\xaa\x5c\xb0\x9b\x27\x19\xd6\xb8\xdd\xb1\x6f\xbe\x0f\x95\xa0\x6c\x01\xdd\xd4\x3f\x68\x30\x5a\xdb\x12\x3b\x11\x95\x21\x11\x11\x99\x27\x78\x80\x32\x4f\x94\x3d\xae\xc9\x11\x45\x43\x88\x73\x16\x56\x0c\xcb\xa2\x96\x67\x37\x05\xad\x7b\xab\x24\x63\x5b\x3c\xf5\xc7\x62\x91\xa7\xc8\x54\xc5\xce\xd1\x99\x70\x91\x12\x35\xa1\x09\xba\x14\x71\xd5\x72\x00\x2d\x58\x9b\x75\xec\x3b\xbe\x30\x28\x0a\x64\x91\xd6\x21\x4f\xb3\x04\x8d\x8a\x01\xec\xa0\x0c\x49\x66\x80\xbd\x35\x11\xb4\xee\xc3\x5f\xff\xc0\x2d\x4e\xa3\x01\xc4\x84\x26\xb9\xc0\x15\xfc\x9e\x10\x5c\xd4\x18\xfb\xf2\x2f\xe7\x09\x14\x9e\x95\xc0\x3c\x8b\x9c\x88\x08\x12\x54\x80\x6c\x41\x19\xc2\x08\x6e\xe3\x7c\xbc\xff\xdf\x9e\xfd\xf4\xdd\x29\x26\x12\xa1\x80\xb2\x38\xc4\xc4\x7c\xea\x26\x8b\x89\xcf\x88\x3a\x82\x11\x74\xaa\x26\x9d\x85\xae\xf9\xa1\x39\x4e\xab\x2f\x0b\x22\x4e\xc0\x5d\x9e\x33\xb5\x21\xea\x7d\x48\x90\x55\x1e\xba\x51\xa1\x31\x30\x5c\x0f\xfc\xbb\x0d\x3a\x26\x02\x32\x22\x48\x2a\x61\x04\xd3\x52\xe0\x00\xc6\xec\x64\xd6\xeb\x5f\x6d\x63\x9d\xa6\x4c\x31\xb5\x34\x6b\xff\x3a\x33\x18\xc1\xb5\x9c\xf6\xef\x48\xce\x8a\x02\x90\x45\xe5\x70\x94\x2f\xed\x56\xb6\xf5\xd2\x86\x45\x38\xcf\x17\xfb\x82\x32\xd5\x33\xe2\x0e\xa0\x73\x80\x77\x73\x94\x2a\x80\xce\xc0\x71\x34\x5d\x59\x73\xb4\xde\x0e\xef\x0c\x60\x1a\xcc\xfa\x9b\x44\xea\x97\xd2\x66\x3f\xe3\xb2\x0c\x0e\xa0\x4c\x51\x16\x09\x2e\x15\xbf\xc4\x34\x3c\xa6\xc1\xac\xae\x34\x80\xf6\x28\x9b\x01\x92\x19\x67\x12\x81\xb2\x66\x7a\xb6\xf5\x5a\x42\x0d\xfb\x2a\xac\xbf\x12\xd3\x90\x6a\x2d\x45\xc7\x8c\x7a\xa7\xdd\xa4\x79\x68\x6c\x67\x54\xd8\xfd\x77\x36\xae\x6c\x52\xcf\x58\x16\x34\x85\xdc\xfd\xd4\x7e\x9a\x4e\x7a\x65\x9e\x55\x36\xda\x2d\xc9\x46\x9c\x5d\x2e\xb3\x89\x6b\xbb\x65\xb7\xd3\xa7\xec\x98\x24\x34\xaa\xba\xdd\x88\xde\x14\xc6\xc6\x19\x55\x6c\xd2\xfe\x46\x84\xbb\x09\x7a\x7f\xf8\xad\xd7\xf5\x73\x96\x5d\xd3\x0a\x37\x47\xde\x16\x55\x36\xdc\x59\x9b\x36\xdd\xba\xa5\x0a\x27\x09\x65\x57\xd4\xbe\xac\xdb\x2d\x9d\xea\x7e\x33\x5b\xee\xc6\x52\x22\x2f\xa5\xd5\xde\x2a\x37\xed\xfd\x0e\x00\x00\xff\xff\xd6\xc0\xf3\x3a\x21\x07\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 1825, mode: os.FileMode(420), modTime: time.Unix(1488211478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x6b\xdb\x40\x18\xc6\x77\x7d\x8a\x07\xa3\xc1\x86\x56\xda\x4d\x85\x70\x0d\x1a\xbb\xb8\x9b\xf1\x70\xb5\xce\xe6\x8a\x7c\x32\x77\xa7\x16\x23\x6e\xe8\xd4\xff\xd0\xc1\x74\xed\x52\x42\x96\x24\x64\xc9\x1f\x12\xc8\x97\x71\x64\x6f\xf9\x0a\xe1\xb5\x15\xd9\x11\x01\x27\x37\x08\x49\xef\xf3\x3e\xef\xf3\x7b\xcf\xf7\x91\xe7\x70\xb5\x46\x3b\x80\x07\x6b\x9d\xea\x8f\xf7\x8e\x4d\x38\xac\xf5\xf4\x67\x31\x32\x8e\xef\x53\xa9\x38\xfa\x5f\xfc\xfd\xba\xb8\x3a\x5b\xce\x4f\xd1\x4d\x63\x1e\x25\x33\x2c\xe7\xff\x8a\x6f\x7f\xee\xae\x7f\xad\x4e\xce\x17\x17\xbf\x57\x07\x5f\x8a\xef\x3f\x6f\x7f\x1c\x2e\x6e\x8e\x8b\xf9\x25\x75\x3a\x62\x32\x4d\x95\x41\x94\x66\x32\x66\x46\xa4\xd2\x71\xa6\xd9\x87\x44\x0c\xa1\x8d\xca\x86\xa6\x36\xb3\x8d\xb7\x4c\x73\xe4\x0e\x00\x2a\x29\x26\xc7\x1c\xae\x78\x05\x77\xb4\x4e\x1a\x09\x9e\xc4\x9a\xf2\x92\xa2\xb4\xfa\xc4\xd4\x83\x4f\xaf\xdb\xf1\xa2\x54\x4d\x98\x89\x44\xc2\xe3\xb5\xad\x3b\xda\xda\xef\xc8\xde\xcf\xa6\xbc\x67\x94\x90\x63\x52\xd0\x17\xac\x0d\xf3\x1c\x5c\xc6\x34\x60\x77\x82\x90\xc2\x84\xcd\x8f\x3a\x95\x6d\x74\xe4\x2c\x6c\x95\x11\xe9\x54\x2f\xe3\x8c\xa9\x18\x09\x37\x88\xc5\xd0\x20\x00\xe9\xc1\x74\x88\xfe\x66\xce\xba\x77\x00\x9e\x10\x22\x14\x37\x99\x92\x90\x22\x81\xad\x3c\xf6\x33\x97\xaa\xfd\xb0\x08\x36\x39\xde\xbc\x46\x83\x1a\xaa\x42\x63\xcb\x48\x66\x9b\x67\x7d\x9f\x15\xeb\x53\xa4\x24\x28\x19\x1f\xa1\x35\x5b\x2f\x04\x21\x93\x7e\x2d\xdd\x00\xc1\xf3\x00\x43\x8f\x42\xd6\x2e\x8c\x4e\xb9\x59\x32\x2f\x09\xad\x73\x1f\x00\x00\xff\xff\xf8\x56\x89\x62\xf1\x02\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 753, mode: os.FileMode(420), modTime: time.Unix(1488211267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

