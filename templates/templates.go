// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xbd\x4a\xc4\x40\x14\x46\xfb\xfb\x14\x5f\x91\x72\x49\xfa\x85\x54\xb2\x0b\x36\x96\xf6\xe3\xe6\x46\x06\x92\x49\xd8\xcc\x20\xcb\x30\x85\x95\xff\x60\x11\x6c\x6d\x44\x6c\x54\x6c\xfc\x41\xc1\x97\x89\xb3\xdb\xf9\x0a\x32\x63\x04\xcb\x7b\xee\x39\x7c\x59\x46\x59\x06\x6b\x91\xee\x88\x9a\xe1\x5c\xda\x1d\xc8\x52\xd3\x2f\xf7\xf7\x37\xfe\xea\x68\x78\x7f\x5e\xf7\x4f\xd8\x6a\x0a\x9e\x57\x2b\xac\xfb\x6b\x7f\x7c\xf9\xfd\x71\xbe\x79\x7c\x19\x5e\x2f\x36\xb7\x87\xfe\xe4\xec\xeb\xf4\x6e\xf8\x7c\xf0\xfd\x5b\x28\x49\xd6\x6d\xb3\xd4\x98\x37\x46\x15\x42\xcb\x46\x11\xb5\x66\xaf\x92\x0b\xb0\x32\xf5\xff\xb9\x29\xb6\x95\x9e\x60\x16\x31\x11\x00\x8c\xa6\x5e\xb5\x2c\x2a\x29\x3a\xcc\x90\x07\x2b\x3e\xad\xc5\x52\xa8\x7d\x46\x22\x27\x48\x4a\x4c\x73\xa4\x21\x4e\x77\x45\x65\xb8\x83\x73\x51\x5b\x88\x8e\x83\x9b\x94\x7f\x43\xc8\xc7\x3b\x8a\x01\x58\x0b\x56\x45\x28\x1c\xfd\x04\x00\x00\xff\xff\x83\x20\x0d\x86\x07\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 263, mode: os.FileMode(420), modTime: time.Unix(1487071673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3f\x6f\xd4\x4e\x10\xed\xfd\x29\x46\xd6\x15\x77\xd2\xfd\x7c\xbf\xda\xd2\xa1\x1c\x51\x22\x51\x80\xa2\x24\x82\xe2\x74\xc5\x9e\x3d\xbe\x2c\xb2\xd7\x66\x77\x1d\x14\x99\x2d\xa8\xf8\x2f\x51\x44\xb4\x34\x08\xd1\x00\xa2\xe1\x8f\x40\xe2\xcb\x84\x4b\x3a\xbe\x02\xda\xf5\xfa\x6c\x9f\xb9\x04\x57\xde\xf5\x9b\x99\x37\xef\xcd\x78\x34\x82\xa2\x80\x9e\x10\xe0\x8f\xc1\x03\xa5\x9c\xd5\x8d\x77\x8b\x24\x08\x4a\x79\xe2\x3e\x8d\xa4\x33\x1a\xe9\x4f\xcb\xf7\x6f\x96\xaf\x1e\x9d\x7d\xff\x7c\x7e\xfa\x09\xb6\xd3\x10\x77\xe3\x13\x38\x3f\x7d\xbd\x7c\xfc\xf2\xf7\x8f\xe7\x17\x1f\xbf\x9c\x7d\x7d\x71\xf1\xf6\xe1\xf2\xc9\xb3\x5f\x4f\xdf\x9d\xfd\xfc\xb0\x3c\xfd\xa6\x23\x1d\x9a\x64\x29\x97\xb0\x9b\xe6\x2c\x24\x92\xa6\xcc\x71\xb2\x7c\x1e\xd3\x00\x84\xe4\x79\x20\xd7\x6a\x42\xe1\x00\x80\xbe\xe4\x84\x2d\x10\x7a\x74\x08\xbd\x44\x73\xd4\xa0\x03\xe4\xc7\x34\x40\xef\x26\xca\xa3\x34\x14\xa0\x94\x8e\xe6\x28\x73\xce\x0e\x4f\x32\x5c\xe1\x0e\x27\x9e\x3e\x1f\x48\x4e\xd9\x02\x7a\x89\xb7\x5f\x63\x94\x32\x25\xb6\x42\x2a\x02\xc2\x43\x32\x8f\x71\x1f\x45\x1e\x4b\x73\xbd\x22\x47\x24\x0d\x20\xca\x59\x50\x31\x2c\x8b\x1a\x9e\xbd\x04\x94\xea\xb7\x49\x46\xa6\x78\xe2\x4d\xf8\x22\x4f\x90\xc9\x8a\x5d\x54\xb5\xe6\x57\x89\xd6\xd9\x45\x9e\xe5\x05\xc3\xa2\x40\x16\x2a\x15\xa4\x49\x16\xa3\x56\xcb\x87\x2d\x14\x01\xc9\x34\xb0\xbf\xd6\xac\x52\x03\xf8\xef\x1a\xdc\x4e\x69\x38\x84\x88\xd0\x38\xe7\xd8\xc2\xef\x70\x9e\xf2\x15\xc6\xbc\x5c\x4f\xd3\x18\x0a\xc7\xb4\xaa\x9f\x45\x4e\x78\x08\x31\x4a\x40\xb6\xa0\x0c\x61\x0c\x77\x70\x3e\xd9\xbb\xb1\x63\x8e\x9e\xbd\xc5\x58\x20\x14\x50\x16\x87\x88\xe8\xa3\xaa\xb3\xe8\xf8\x8c\xc8\x23\x18\x83\x5b\x35\x69\xad\xb2\xcd\x8f\xf4\x75\x52\x9d\x0c\x88\x58\xa1\xb6\xd3\x9c\xc9\x8e\x78\x0f\x20\x46\x56\x79\x65\x47\x82\x46\xc0\x70\x3d\xf0\xff\x26\xe8\x98\x70\xc8\x08\x27\x89\x80\x31\x4c\x4b\x81\x7d\x98\xb0\x93\x59\x7f\x70\xb5\x5d\xab\x34\x65\x8a\xa9\xdb\xf2\xcf\x9d\xc1\x18\x5a\x37\xde\x5d\x91\xb2\xa2\x00\x64\x61\x69\x76\xf9\xd2\xa4\xbc\x89\x73\x13\x16\xe2\x3c\x5f\xec\x71\xca\x64\x5f\x8b\x38\x04\x77\x1f\xef\xe5\x28\xa4\x0f\xee\xd0\x72\xd1\xec\x8d\x09\x4a\x6d\x86\xbb\x43\x98\xfa\xb3\x41\x97\xc8\xea\xa5\xb4\xd3\xcb\x52\x51\x06\xfb\x50\xa6\x28\x8b\xf8\x97\x8a\x5c\x62\x6a\x1e\x53\x7f\xb6\xaa\x34\x84\xe6\xc8\xea\x41\x11\x59\xca\x04\x02\x65\xf5\x94\x6c\xea\xb5\x84\x6a\xf6\x55\xd8\xa0\x15\x53\x93\x6a\x0c\xbf\xab\x47\xda\x6d\x36\xa9\x1f\x1a\x99\x59\xe4\x66\x9f\xad\x5d\xad\x8d\xe9\x6b\xcb\xfc\xba\x90\xfd\xdf\x34\x9f\xba\x93\x7e\x99\xa7\xcd\x46\xd9\x65\xe8\xc4\x99\x25\xd2\x1b\xb7\xb6\x43\x66\x0b\x3d\xca\x8e\x49\x4c\xc3\xaa\xdb\x4e\x74\x57\x18\x13\xa7\x55\x31\x49\x07\x9d\x08\xbb\xf1\xfd\xbf\x7c\x56\xeb\xfa\x59\xcb\xfe\xd1\x0a\x3b\x47\xce\x06\x55\x3a\xee\xac\x4d\x9b\x6a\xfc\x8d\x0a\x2b\x09\x65\x57\xd4\xbe\xac\xdb\x0d\x9d\xaa\x41\x3d\x5b\xf6\xcf\x24\x79\x5e\x4a\xab\x9c\x36\x37\xe5\xfc\x09\x00\x00\xff\xff\x9b\x49\xc8\x60\xf1\x06\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 1777, mode: os.FileMode(420), modTime: time.Unix(1487678884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x4b\xc3\x40\x18\xc6\xf7\x7c\x8a\x87\xd2\xa1\x05\x4d\xf6\x62\x08\x55\xe8\xe8\xd2\x6e\xa5\x43\x6c\xae\xe5\x24\xbd\x94\xbb\x8b\x52\xc2\x0d\x4e\xfe\x07\x87\xe2\xea\x22\xe2\xa2\xe2\xe2\x1f\x14\xfc\x32\x35\xed\xe6\x57\x90\xb7\x0d\xa9\x0d\x82\x78\x43\x48\xf2\x3e\xef\xf3\x3e\xbf\xf7\x1c\x07\x49\x82\xb2\x52\xa8\xb9\xb0\x61\x8c\x95\xff\xb1\xb7\xfd\x01\x83\x31\xb6\xda\xe7\x3d\x6d\x39\x0e\x95\xd2\xbb\xeb\xf4\xf2\x70\xf2\xf6\x34\x1d\x3f\x62\x2b\x0a\x58\x23\x1c\x61\x3a\xbe\x4a\x8f\x2e\xbe\xde\xcf\x66\x0f\xcf\x93\x97\xf3\xd9\xcd\x41\x7a\x7c\xfa\x79\x72\x3b\xf9\xb8\x4f\xc7\xaf\xd4\x69\xf1\xc1\x30\x92\x1a\x8d\x28\x16\x81\xaf\x79\x24\x2c\x6b\x18\xef\x84\xbc\x0b\xa5\x65\xdc\xd5\x85\x99\x35\x6c\xfa\x8a\x21\xb1\x00\x50\x49\xfa\xa2\xcf\x50\xe6\x6b\x28\xf7\xe6\x49\x1b\x9c\x85\x81\xa2\xbc\xa4\xc8\xac\xf6\x7c\x39\xf7\xe9\x2d\x6d\x32\xdb\x66\xab\x6e\xb7\x46\x43\xd6\xd4\x92\x8b\x3e\x29\xe8\x0b\xc6\x78\x49\x02\x26\x02\x32\xfa\xe9\xc4\x05\xd7\x5e\x65\x57\x45\xa2\x86\xba\x18\x79\xd5\x2c\x0a\x9d\xfc\xa5\x1f\xfb\x32\x40\xc8\x34\x02\xde\xd5\x70\x41\x7a\xf8\xca\x43\x7b\x31\x67\xde\xdb\x01\x0b\x09\x05\x92\xe9\x58\x0a\x08\x1e\xc2\xe4\x1e\x7f\xb3\x65\xaa\x25\x14\xdc\xc5\xbc\x8d\x75\x94\x56\x0a\xa5\x25\x0b\x35\x2d\x9e\xc5\xfd\xe4\x4c\xbf\x11\x91\x20\x63\x59\x41\xa8\x54\xff\x19\x98\x4c\xda\x85\x74\x1d\xb8\xab\x20\x9e\x4d\x61\x0a\x17\x40\x27\xdb\x14\x99\x64\x24\xc6\xfa\x0e\x00\x00\xff\xff\x8c\xd1\x97\x9a\xa9\x02\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 681, mode: os.FileMode(420), modTime: time.Unix(1487678857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

