// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xbd\x4a\xc4\x40\x14\x46\xfb\xfb\x14\x5f\x91\x72\x49\xfa\x85\x54\xb2\x0b\x36\x96\xf6\xe3\xe6\x46\x06\x92\x49\xd8\xcc\x20\xcb\x30\x85\x95\xff\x60\x11\x6c\x6d\x44\x6c\x54\x6c\xfc\x41\xc1\x97\x89\xb3\xdb\xf9\x0a\x32\x63\x04\xcb\x7b\xee\x39\x7c\x59\x46\x59\x06\x6b\x91\xee\x88\x9a\xe1\x5c\xda\x1d\xc8\x52\xd3\x2f\xf7\xf7\x37\xfe\xea\x68\x78\x7f\x5e\xf7\x4f\xd8\x6a\x0a\x9e\x57\x2b\xac\xfb\x6b\x7f\x7c\xf9\xfd\x71\xbe\x79\x7c\x19\x5e\x2f\x36\xb7\x87\xfe\xe4\xec\xeb\xf4\x6e\xf8\x7c\xf0\xfd\x5b\x28\x49\xd6\x6d\xb3\xd4\x98\x37\x46\x15\x42\xcb\x46\x11\xb5\x66\xaf\x92\x0b\xb0\x32\xf5\xff\xb9\x29\xb6\x95\x9e\x60\x16\x31\x11\x00\x8c\xa6\x5e\xb5\x2c\x2a\x29\x3a\xcc\x90\x07\x2b\x3e\xad\xc5\x52\xa8\x7d\x46\x22\x27\x48\x4a\x4c\x73\xa4\x21\x4e\x77\x45\x65\xb8\x83\x73\x51\x5b\x88\x8e\x83\x9b\x94\x7f\x43\xc8\xc7\x3b\x8a\x01\x58\x0b\x56\x45\x28\x1c\xfd\x04\x00\x00\xff\xff\x83\x20\x0d\x86\x07\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 263, mode: os.FileMode(420), modTime: time.Unix(1487071673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3b\x6f\xd4\x4a\x14\xee\xfd\x2b\x8e\xac\x2d\x76\xa5\xbd\xde\x5b\x5b\xda\xab\xe4\x46\x89\x44\x01\x8a\x12\x04\xc5\x6a\x8b\x59\xfb\x78\x33\xc8\x1e\x9b\x99\x71\x50\x64\xa6\xa0\xe2\x2d\x51\x44\xb4\x34\x08\xd1\x00\xa2\xe1\x21\x90\xf8\x33\x61\x93\x8e\xbf\x80\xe6\xe1\xb5\xbd\xcb\x26\xb8\x1a\x9f\x39\x8f\xef\x7c\xdf\x39\x33\x1a\x41\x55\x41\x4f\x08\x08\xc7\x10\x80\x52\xde\xd2\x12\xdc\x20\x19\x82\x52\x81\xb8\x47\x13\xe9\x8d\x46\xfa\x6a\xf1\xee\xf5\xe2\xe5\xc3\xb3\x6f\x9f\xce\x4f\x3f\xc2\x4e\x1e\xe3\x5e\x7a\x02\xe7\xa7\xaf\x16\x8f\x5e\xfc\xfa\xfe\xec\xe2\xc3\xe7\xb3\x2f\xcf\x2f\xde\x3c\x58\x3c\x7e\xfa\xf3\xc9\xdb\xb3\x1f\xef\x17\xa7\x5f\x75\xa4\x47\xb3\x22\xe7\x12\xf6\xf2\x92\xc5\x44\xd2\x9c\x79\x5e\x51\xce\x52\x1a\x81\x90\xbc\x8c\xe4\x4a\x4d\xa8\x3c\x00\xd0\x46\x4e\xd8\x1c\xa1\x47\x87\xd0\xcb\x34\x46\xed\x74\x88\xfc\x98\x46\x18\x5c\x47\x79\x94\xc7\x02\x94\xd2\xd1\x1c\x65\xc9\xd9\xcd\x93\x02\x6b\x3f\x7d\x3e\x94\x9c\xb2\x39\xf4\xb2\xe0\xa0\xb9\x57\xca\xa4\xdf\x8a\xa9\x88\x08\x8f\xc9\x2c\xc5\x03\x14\x65\x2a\x8d\x79\x09\x8c\x48\x1a\x41\x52\xb2\xa8\x46\x67\x0b\x1a\x8c\xbd\x0c\x94\xea\x77\x01\x26\xa6\x70\x16\x6c\xf3\x79\x99\x21\x93\x35\xb2\xa4\x6e\x2b\xac\x13\xb5\x91\x25\x81\xc3\x04\xc3\xaa\x42\x16\x2b\x15\xe5\x59\x91\xa2\x66\x29\x84\x2d\x14\x11\x29\xb4\x63\x7f\xa5\x49\xa5\x06\xf0\xcf\x7f\x70\x2b\xa7\xf1\x10\x12\x42\xd3\x92\x63\xc7\x7f\x97\xf3\x9c\x2f\x7d\xcc\xe1\xff\x3c\x4f\xa1\xf2\x4c\x9b\xfa\x9b\x97\x84\xc7\x90\xa2\x04\x64\x73\xca\x10\xc6\x70\x1b\x67\xdb\xfb\xd7\x76\xcd\x6f\xe0\xac\x98\x0a\x84\x0a\x6c\x71\x48\x88\xfe\x55\x4d\x16\x1d\x5f\x10\x79\x04\x63\xf0\x5d\x83\xb5\x44\xae\xf1\x91\x36\x67\xf5\x9f\x71\x22\x8e\xa4\x9d\xbc\x64\x72\x8d\xb8\xfb\x90\x22\xab\x75\x72\xa3\x40\x13\x60\xb8\x1a\xf8\x6f\xdb\xe9\x98\x70\x28\x08\x27\x99\x80\x31\x4c\x2c\xc1\x21\x6c\xb3\x93\x69\x7f\x70\xb5\x54\xcb\x34\x36\xc5\xc4\xef\x68\xe7\x4f\x61\x0c\x1d\x4b\x70\x47\xe4\xac\xaa\x00\x59\x6c\x85\xb6\x87\x36\xe4\x4d\x98\xdb\x6e\x31\xce\xca\xf9\x3e\xa7\x4c\xf6\x35\x89\x43\xf0\x0f\xf0\x6e\x89\x42\x86\xe0\x0f\x1d\x16\x8d\xde\x88\xa0\xd4\x66\x77\x7f\x08\x93\x70\x3a\x58\x07\xb2\x3c\x58\x39\x83\x22\x17\x36\x38\x04\x9b\xc2\x16\x09\x2f\x25\xd9\xfa\x34\x38\x26\xe1\x74\x59\x69\x08\xed\x91\xd5\x83\x22\x8a\x9c\x09\x04\xca\x9a\x29\xd9\xd4\xab\x75\xd5\xe8\xeb\xb0\x41\x27\xa6\x01\xd5\x1a\x7e\x5f\x8f\xb4\xdf\x6e\x52\x7f\x34\x31\xb3\xc8\xcd\x2e\x3b\xb9\x3a\x1b\xd3\xd7\x92\x85\x4d\x21\xf7\xce\xb4\xbf\xa6\x93\xbe\xcd\xd3\x45\xa3\xdc\x32\xac\xc5\x99\x25\xd2\x1b\xb7\xb2\x43\x66\x0b\x03\xca\x8e\x49\x4a\xe3\xba\xdb\xb5\xe8\x75\x62\x4c\x9c\x66\xc5\x24\x1d\xac\x45\xb8\x8d\xef\xff\xe1\x5a\xad\xf2\xe7\x24\xfb\x4b\x29\xdc\x1c\x79\x1b\x58\x59\x53\x67\x65\xda\x54\xeb\x35\xaa\x1c\x25\x94\x5d\x51\xfb\xb2\x6e\x37\x74\xaa\x06\xcd\x6c\xb9\x97\x49\xf2\xd2\x52\xab\xbc\x2e\x36\xe5\xfd\x0e\x00\x00\xff\xff\x92\x11\x5e\x0b\xe9\x06\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 1769, mode: os.FileMode(420), modTime: time.Unix(1487071673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x4b\xfb\x40\x18\xc7\xf7\xbc\x8a\x2f\xa5\x43\x0b\xbf\x5f\xb2\x17\x43\x50\xa1\xa3\x8b\x6e\xa5\x43\x6c\xae\xe5\x24\xbd\x94\xbb\x8b\x52\xc2\x0d\x4e\xfe\x07\x87\xe2\xea\x22\xe2\xa2\xe2\xe2\x1f\x14\x7c\x33\x35\xed\xe6\x5b\x90\xa7\x3d\x52\x1b\x04\xf1\x86\xd2\xe4\x79\x9e\xcf\xf3\xfd\x5c\x3c\x0f\x59\x86\xaa\x52\x68\xf8\x70\x61\x8c\x53\xbc\x71\x37\xc2\x3e\x83\x31\xae\xda\xe3\x5d\xed\x78\x1e\x95\xf2\xdb\xab\xfc\xe2\x60\xfc\xfa\x38\x19\x3d\x60\x3d\x89\x58\x33\x1e\x62\x32\xba\xcc\x0f\xcf\x3f\xdf\x4e\xa7\xf7\x4f\xe3\xe7\xb3\xe9\xf5\x7e\x7e\x74\xf2\x71\x7c\x33\x7e\xbf\xcb\x47\x2f\x34\xe9\xf0\xfe\x20\x91\x1a\xcd\x24\x15\x51\xa8\x79\x22\x1c\x67\x90\x6e\xc7\xbc\x03\xa5\x65\xda\xd1\xa5\x9d\x0d\xac\x85\x8a\x21\x73\x00\x50\x49\x86\xa2\xc7\x50\xe5\xff\x50\xed\xce\x92\x36\x39\x8b\x23\x45\x79\xa9\xc3\xa2\x76\x43\x39\xe3\x74\x17\x18\x8b\xdd\x1a\x0e\xd8\xa6\x96\x5c\xf4\xa8\x4a\x4f\x30\x26\xc8\x32\x30\x11\x11\xe4\x3b\x85\x0b\xae\x83\xda\x8e\x4a\x44\x03\xab\x62\x18\xd4\x6d\x0c\x3a\xc5\x9f\x5e\x1a\xca\x08\x31\xd3\x88\x78\x47\xc3\x07\xf5\x23\x54\x01\x5a\xf3\x3d\xb3\xd9\x36\x58\x4c\x1a\x90\x4c\xa7\x52\x40\xf0\x18\xa6\x60\xfc\xee\x65\xbb\x16\x42\xf0\xe7\xfb\x56\xfe\xa3\xb2\x54\xa8\x2c\x5c\x68\x68\xfe\x5b\xbe\x9b\xc2\xe9\x27\x23\x6a\xb0\x2e\x4b\x0a\xb5\xfa\x1f\x03\x13\xa4\x55\x4a\xd7\x86\xbf\x2c\x12\xb8\x14\xa6\xf4\x01\xe8\xd8\x9b\x22\x88\x35\x31\xce\x57\x00\x00\x00\xff\xff\x7a\xfe\x13\xe8\xa5\x02\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 677, mode: os.FileMode(420), modTime: time.Unix(1487071673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

