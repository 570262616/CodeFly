// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x3d\x4b\xc4\x30\x1c\xc6\xf7\x7c\x8a\x67\xe8\x78\xa4\xfb\x41\x07\x91\x2b\xb8\x38\xba\xc7\x6b\x2a\x81\x34\x29\x4d\x8a\x1c\x21\x83\x93\xef\xe0\x50\x5c\x5d\x44\x5c\x54\x5c\x7c\x41\xc1\x2f\x53\x73\xb7\xf9\x15\x24\xb9\x13\x5c\x7f\xf9\xfd\x9f\x27\x4f\x9e\xc3\x39\x64\xc6\x60\x5a\x80\xc2\x7b\xb2\x26\x74\x97\x35\x1c\xde\x53\x73\x28\x6a\x4b\xf2\x3c\xf2\xf0\x70\x1b\xae\x8f\xc7\x8f\x97\xe5\xf0\x8c\x6d\x5d\xf1\x52\x2e\xb0\x1c\x6e\xc2\xc9\xd5\xcf\xe7\xc5\xea\xe9\x75\x7c\xbb\x5c\xdd\x1d\x85\xd3\xf3\xef\xb3\xfb\xf1\xeb\x31\x0c\xef\xf1\x92\x88\xa6\xd5\x9d\x45\xa9\x7b\x55\x31\x2b\xb4\x22\xa4\xed\xf7\xa5\x98\x83\xab\xbe\xf9\x5f\x37\xc5\x8e\xb2\x13\xcc\x12\x26\x04\x00\x36\xa6\x5d\xb4\x9c\x49\xc1\x0c\x66\x28\xa2\x95\x1e\x9d\x43\xc7\xd4\x01\x47\x26\x26\xc8\xea\x34\x22\x1e\xd3\x3d\x26\x7b\x6e\xe2\x9e\xa8\xcd\x99\xe1\x9b\x9d\x74\xcb\x18\x5a\xea\xae\x61\xb6\x14\x92\x57\xa9\x38\xab\xff\x3e\x80\x22\x79\xf5\x3a\x20\x02\xe7\xc0\x55\x15\x93\x3c\xf9\x0d\x00\x00\xff\xff\x65\xd3\x36\xaa\x2e\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1493471596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x6f\xdb\x48\x10\xed\xf9\x2b\x06\x82\x0a\x09\xd0\x51\x57\x13\xd0\xc1\x3a\xc3\x02\xae\xb8\xc0\xb0\x83\xa4\x10\x54\xac\xc8\xa1\xbc\x01\xb9\xcb\xec\x2e\x1d\x18\xcc\x16\xa9\xf2\x0d\xa4\x30\xd2\xa6\x09\x82\x34\x49\x90\x26\x1f\x48\x80\xfc\x19\x47\x76\x97\xbf\x10\xec\x72\x29\x52\x62\x64\x9b\x15\xb9\x7c\x33\xf3\xe6\xbd\x99\x1d\x0e\xa1\x28\xa0\x2b\x25\x04\x23\xf0\x41\x6b\x6f\x75\xe2\xdf\x20\x29\x82\xd6\xbe\xbc\x47\x63\xe5\x0d\x87\xe6\xd7\xf2\xdd\xeb\xe5\xcb\x87\x67\xdf\x3e\x9d\x9f\x7e\x84\x5d\x1e\xe1\x24\x39\x81\xf3\xd3\x57\xcb\x47\x2f\x7e\x7d\x7f\x76\xf1\xe1\xf3\xd9\x97\xe7\x17\x6f\x1e\x2c\x1f\x3f\xfd\xf9\xe4\xed\xd9\x8f\xf7\xcb\xd3\xaf\x26\xd2\xa3\x69\xc6\x85\x82\x09\xcf\x59\x44\x14\xe5\xcc\xf3\xb2\x7c\x9e\xd0\x10\xa4\x12\x79\xa8\x36\x6a\x42\xe1\x01\x80\x39\x14\x84\x2d\x10\xba\x74\x00\xdd\xd4\x70\x34\xa0\x43\x14\xc7\x34\x44\xff\x7f\x54\x47\x3c\x92\xa0\xb5\x89\x16\xa8\x72\xc1\x6e\x9e\x64\x58\xe1\xc6\x52\xfa\xe6\xfb\x50\x09\xca\x16\xd0\x4d\xfd\x83\x1a\xa3\xb5\x2d\xb1\x13\x51\x19\x12\x11\x91\x79\x82\x07\x28\xf3\x44\xd9\xe3\x15\x39\xa2\x68\x08\x71\xce\xc2\x8a\x61\x59\xd4\xf2\xec\xa6\xa0\x75\x6f\x9d\x64\x6c\x8b\xa7\xfe\x58\x2c\xf2\x14\x99\xaa\xd8\x39\x3a\x13\x2e\x52\xa2\x26\x34\x41\x97\x22\xae\x5a\x0e\xa0\x01\x6b\xb2\x8e\x7d\xc7\x17\x06\x45\x81\x2c\xd2\x3a\xe4\x69\x96\xa0\x51\x31\x80\x1d\x94\x21\xc9\x0c\xb0\xb7\x21\x82\xd6\x7d\xf8\xeb\x1f\xb8\xc5\x69\x34\x80\x98\xd0\x24\x17\xb8\x86\xdf\x13\x82\x8b\x15\xc6\xbe\xfc\xcb\x79\x02\x85\x67\x25\x30\xcf\x22\x27\x22\x82\x04\x15\x20\x5b\x50\x86\x30\x82\xdb\x38\x1f\xef\xff\xb7\x67\x3f\x7d\x77\x8a\x89\x44\x28\xa0\x2c\x0e\x31\x31\x9f\xba\xce\x62\xe2\x33\xa2\x8e\x60\x04\x1d\xd7\x64\x65\xa1\x6b\x7e\x68\x8e\xd3\xea\xcb\x82\x88\x13\x70\x97\xe7\x4c\xb5\x44\xbd\x0f\x09\xb2\xca\x43\x37\x2a\x34\x06\x86\x9b\x81\x7f\x37\x41\xc7\x44\x40\x46\x04\x49\x25\x8c\x60\x5a\x0a\x1c\xc0\x98\x9d\xcc\x7a\xfd\xab\x6d\x5c\xa5\x29\x53\x4c\x2d\xcd\x95\x7f\x9d\x19\x8c\xe0\x5a\x4e\xfb\x77\x24\x67\x45\x01\xc8\xa2\x72\x38\xca\x97\x66\x2b\xdb\x7a\x69\xc2\x22\x9c\xe7\x8b\x7d\x41\x99\xea\x19\x71\x07\xd0\x39\xc0\xbb\x39\x4a\x15\x40\x67\xe0\x38\x9a\xae\xac\x39\x5a\x6f\x87\x77\x06\x30\x0d\x66\xfd\x36\x91\xd5\x4b\x69\xb3\x9f\x71\x59\x06\x07\x50\xa6\x28\x8b\x04\x97\x8a\x5f\x62\x6a\x1e\xd3\x60\xb6\xaa\x34\x80\xe6\x28\x9b\x01\x92\x19\x67\x12\x81\xb2\x7a\x7a\xb6\xf5\x5a\x42\x0d\xfb\x2a\xac\xbf\x16\x53\x93\x6a\x2c\x45\xc7\x8c\x7a\xa7\xd9\xa4\x79\x68\x6c\x67\x54\xd8\xfd\x77\x36\xae\x6d\x52\xcf\x58\x16\xd4\x85\xdc\xfd\xd4\x7c\xea\x4e\x7a\x65\x9e\x75\x36\xda\x2d\x49\x2b\xce\x2e\x97\xd9\xc4\x8d\xdd\xb2\xdb\xe9\x53\x76\x4c\x12\x1a\x55\xdd\xb6\xa2\xdb\xc2\xd8\x38\xa3\x8a\x4d\xda\x6f\x45\xb8\x9b\xa0\xf7\x87\xdf\x7a\x53\x3f\x67\xd9\x35\xad\x70\x73\xe4\x6d\x51\xa5\xe5\xce\xc6\xb4\xe9\xc6\x2d\x55\x38\x49\x28\xbb\xa2\xf6\x65\xdd\x6e\xe9\x54\xf7\xeb\xd9\x72\x37\x96\x12\x79\x29\xad\xf6\xd6\xb9\x69\xef\x77\x00\x00\x00\xff\xff\x01\xc0\x16\xb1\x21\x07\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 1825, mode: os.FileMode(420), modTime: time.Unix(1493471618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xbd\x6a\xe3\x40\x14\x85\x7b\x3d\xc5\xc1\xa8\xb0\x61\x57\xea\xcd\x0a\xe1\x5d\x50\xb9\xcd\x6e\x67\x5c\xcc\x5a\x63\x33\x8b\x3c\x32\x33\xa3\x5d\x8c\x98\x62\xab\xfd\x4b\x20\x85\x49\x9b\x26\x84\x34\x49\x48\x93\x1f\x12\xc8\xcb\x38\xb2\xbb\xbc\x42\xb8\xb6\x22\x3b\x22\xe0\x64\x0a\x21\xe9\x9e\x7b\xee\xf9\xee\xf8\x3e\xf2\x1c\xae\xd6\x68\x07\xf0\x60\xad\x53\xfd\xf1\x3e\xb3\x11\x87\xb5\x9e\xfe\x29\x06\xc6\xf1\x7d\x2a\x15\x27\x87\xc5\xfe\xef\xd9\xcd\xc5\x7c\x7a\x8e\x4f\x69\xcc\xa3\x64\x82\xf9\xf4\xa0\xf8\xb3\xf7\x70\xbb\xb3\x38\xbb\x9c\x5d\xed\x2e\x8e\x7e\x15\x7f\xff\xdf\xff\x3b\x9e\xdd\x9d\x16\xd3\x6b\xea\x74\xc4\x68\x9c\x2a\x83\x28\xcd\x64\xcc\x8c\x48\xa5\xe3\x8c\xb3\x6f\x89\xe8\x43\x1b\x95\xf5\x4d\x6d\x66\x1b\x1f\x99\xe6\xc8\x1d\x00\x54\x52\x4c\x0e\x39\x5c\xf1\x0e\xee\x60\x99\x34\x12\x3c\x89\x35\xe5\x25\x45\x69\xf5\x83\xa9\x27\x9f\x8e\xd6\x5e\x94\xaa\x11\x33\x91\x48\x78\xbc\xb4\x75\x07\x6b\xfb\x0d\xd9\xd7\xc9\x98\x7f\x31\x4a\xc8\x21\x29\xe8\x0b\xd6\x86\x79\x0e\x2e\x63\x1a\xb0\x39\x41\x48\x61\xc2\xe6\x77\x9d\xca\x36\x3a\x72\x12\xb6\xca\x88\x74\xaa\x97\x61\xc6\x54\x8c\x84\x1b\xc4\xa2\x6f\x10\x80\xf4\x60\x3a\x44\x77\x35\x67\xd9\xdb\x03\x4f\x08\x11\x8a\x9b\x4c\x49\x48\x91\xc0\x56\x1e\xdb\x99\x4b\xd5\x76\x58\x04\xab\x1c\x1f\xde\xa3\x41\x0d\x55\xa1\xb1\x66\x24\xb3\xd5\xb3\xbe\xcf\x8a\xf5\x25\x52\x12\x94\x8c\xcf\xd0\x9a\xad\x37\x82\x90\x49\xb7\x96\xae\x87\xe0\x75\x80\xa1\x47\x21\x6b\x17\x46\xa7\xdc\x2c\x99\x97\x84\xd6\x79\x0c\x00\x00\xff\xff\x63\xfa\xc0\x92\xf1\x02\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 753, mode: os.FileMode(420), modTime: time.Unix(1493471607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

